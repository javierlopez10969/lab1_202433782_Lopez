----------------------------------------------------------------------------------------------------------------------------------------
Escala de puntajes
0: No realizado.
0.25: Implementación con problemas mayores (funciona 25% de las veces o no
funciona)
0.5: Implementación con funcionamiento irregular (funciona 50% de las veces)
0.75: Implementación con problemas menores (funciona 75% de las veces)
1: Implementación completa sin problemas (funciona 100% de las veces)
----------------------------------------------------------------------------------------------------------------------------------------
Requerimientos Funcionales :

Requerimientos Funcionales Obligatorios :

1. (0.5 pts) TDAs​ . ​ Implementar abstracciones apropiadas para el problema. Representación, Constructores, Funciones de Pertenencia, 
Selectores, Modificadores y Otras Funciones. 

PUNTAJE : 1

2. (0.5 pts) git: ​ Función que permite aplicar los comandos (funciones en este caso) en el contexto de git sobre las zonas de trabajo. La 
función retorna una función que recibe los parámetros propios del comando que se pretende aplicar, procurando dejar un registro de 
histórico (opcional: añadir datos como fecha y hora) de los comandos expresados como funciones aplicados en el orden en que fueron 
aplicados . (git comando)

PUNTAJE : 1

3. (0.5 pts) ​ pull​ : Función que retorna una lista con todos los cambios (commits) desde el RemoteRepository al LocalRepository 
registrados en las zonas de trabajo. Los cambios reflejados en el retorno de la función corresponden a una nueva versión de zonas donde
se vean reflejados los cambios.

Requisito base: Debe emplear recursión natural o de cola, siendo el estilo de recursión empleado distinto al usado en la función add.
(pull zonas)
((git pull) zonas)) 

PUNTAJE : 0.5 , trae los elementos 

4. (1 pto) ​ add​ : Función que añade los cambios locales registrados en el Workspace al Index registrados en las zonas de trabajo. Puede 
hacerlo con la especificación de una lista de nombres de ​ archivos concretos (nombres como strings) o bien sin especificar uno en 
particular (lista nula), con lo cual se añaden todos los archivos en que se registran cambios locales mediante la función add-all 
descrita en los requerimientos extras. En caso de no haber implementado add-all, retornar las zonas sin cambios. Los cambios reflejados 
en el retorno de la función corresponden a una nueva versión de zonas donde se vean reflejados los cambios.

ejemplos de uso: (((git add) (list “file1.rkt” “file2.rkt”)) zonas) ;idem para zonas

(((git add) null) zonas) ;idem para zonas

PUNTAJE : 0.5 , aún no se añaden los cambios registrados , pero si mueve los archivos al index , en caso de estar recién creados .

5. (0.5 pts) ​ commit​ : Función que genera un commit con los cambios almacenados en index especificando un ​ mensaje descriptivo (un
string) para llevarlos al LocalRepository. Los cambios reflejados en el retorno de la función corresponden a una nueva versión de 
zonas donde se vean reflejados los cambios.

ejemplos de uso: (((git commit) “miCommit”) zonas) ;idem para zonas

PUNTAJE : 1

6. (0.5 pts) ​ push​ : Función que envía los commit desde el repositorio local al repositorio remoto registrado en las zonas de trabajo. 
Los cambios reflejados en el retorno de la función corresponden a una nueva versión de zonas donde se vean reflejados los cambios.

ejemplo de uso: ((git push) zonas)) ;idem para zonas

PUNTAJE : 1

7. (0.5 pts) ​ zonas->string​ : Función que recibe las zonas de trabajo y entrega una representación de las mismas como un string posible 
de visualizar de forma comprensible al usuario. Debe hacer uso del char ‘\n’ para los saltos de línea. ​ No utilice las funciones write y display dentro de esta función​ , ya que debe retornar un string el cual pueda luego ser pasado como argumento a la función “write” o “display” para poder visualizarlo de forma comprensible al usuario.

Requisito base: el string resultante al ser impreso por la función write o display
debe ilustrar con claridad los elementos de cada zona de trabajo (i.e., workspace,
index, localRepository y remoteRepository).

PUNTAJE : 1


8. (1 pto) status:​ Función que retorna un string con la información del ambiente de trabajo:

Archivos agregados al Index
Cantidad de commits en el Local Repository
La rama actual en la que se encuentra el Local Repository (predeterminado: “master” ​ )

Debe hacer uso del char ‘\n’ para los saltos de línea. ​ No utilice las funciones write y
display dentro de esta función​ , ya que debe retornar un string el cual pueda luego ser
pasado como argumento a la función “write” o “display” para poder visualizarlo de forma
comprensible al usuario.

ejemplos de uso: ((git status) zonas)

PUNTAJE : 0

9. (1 pto) ​ log: Función que muestra los últimos 5 commits sobre el repositorio/rama actual,
mostrando el mensaje asociado a cada commit. Debe hacer uso del char ‘\n’ para los
saltos de línea. ​ No utilice las funciones write y display dentro de esta función​ , ya
que debe retornar un string el cual pueda luego ser pasado como argumento a la función
“write” o “display” para poder visualizarlo de forma comprensible al usuario.
(log zonas)ejemplos de uso: ((git log) zonas)


10. (1 pto) branch: Función que permite crear una nueva “rama” (flujo alternativo de los
commits). De manera predeterminada, la nueva rama toma la historia del último commit.
Las ramas deben tener un nombre, donde la rama predeterminada se llama ​ “master”.
Los cambios reflejados en el retorno de la función corresponden a una nueva versión de
zonas donde se vean reflejados los cambios.
(branch nombreRama)
ejemplos de uso: (((git branch) “development”) zonas)
tip: función currificada
11. (0,5 pts) checkout: Función que permite cambiar de la rama actual a una rama
específica por su nombre (string). Para cambiar a la rama por defecto, se debe invocar
la función con el argumento ​ “master”. ​ Los cambios reflejados en el retorno de la función
corresponden a una nueva versión de zonas donde se vean reflejados los cambios.
(checkout nombreRama)
ejemplos de uso: (((git branch) “development”) zonas)
(((git branch) “master”) zonas)
tip: función currificada
12. (2 pts) merge: Función que permite tomar los cambios de otra rama (especificada por
su nombre como un string) y sobreescribirlos en la rama actual. En la rama destino
quedan los commits de la rama origen que no están en la rama destino. Además se
genera un commit en la rama de destino que representa el merge. Los cambios
reflejados en el retorno de la función corresponden a una nueva versión de zonas donde
se vean reflejados los cambios.
(merge nombreRama)
ejemplos de uso: (((git merge) “development”) zonas)
13. (2 pts) add-all: Función que permite agregar todos los archivos del Workspace al Index.
Para efectos de este Laboratorio asuma que el Workspace contiene una cantidad infinita
de archivos. Esta función debe ser implementada mediante evaluación perezosa. Los
cambios reflejados en el retorno de la función corresponden a una nueva versión de
zonas donde se vean reflejados los cambios.

(((git add-all) null) zonas)tip: función currificada, evaluación perezosa

14. (1 pto) diff: Función que permite comparar y listar las diferencias entre la rama origen
(sourceBranch) y la rama destino (targetBranch) especificadas mediante strings.
Devuelve una lista con los archivos que difieren en cambios entre las ramas.

(diff sourceBranch)

ejemplos de uso: ((((git diff) sourceBranch) targetBranch) zonas)

tip: función currificada


Requerimientos No Funcionales :

1. (obligatorio) Incluir autoevaluación de cada uno de los requerimientos funcionales (obligatorios y extras) solicitados.
PUNTAJE :1

2. (obligatorio) La implementación debe ser en el lenguaje de programación Scheme.
PUNTAJE : 1

3. (obligatorio)  Usar DrRacket versión 6.11 o superior
PUNTAJE : 1

4. (obligatorio)  Se deben utilizar funciones estándar de dicho lenguaje y no aquellas propias Racket.
PUNTAJE : 1

5. (obligatorio)  No hacer uso de función “define” dentro del cuerpo de otras funciones, de set! o funciones similares para emular el trabajo con variables.
PUNTAJE : 1

6. (1 pts) Todas las funciones deben estar debidamente comentadas. Indicando descripción de la función, argumentos y retornos. En caso de que la función sea recursiva, indicar el tipo de recursión utilizada y el porqué de esta decisión.
PUNTAJE : 0.75

7. (obligatorio)  Respetar la definición de función en términos de conjunto de salida (dominio) y llegada (recorrido) sin efectos colaterales, además del nombre de las mismas.
PUNTAJE : 1

8. (1 pts)  Estructurar su código en archivos independientes. Un archivo para cada TDA implementado y uno para el programa principal donde solo se dispongan sólo las funciones requeridas en el apartado de requerimientos obligatorios.
PUNTAJE : 1

9. (2.5 pts)  Historial de trabajo en Github tomando en consideración la evolución en el desarrollo de su proyecto en distintas etapas. 
PUNTAJE : 1

10. (obligatorio)  Al final de su código incluir al menos 3 ejemplos de uso para cada una de las funciones correspondientes a requerimientos funcionales obligatorios y los extra. Solo se revisarán aquellas funciones para las que existan los ejemplos provistos.
PUNTAJE : 1

